{
	"Create cog": {
		"scope": "python",
		"prefix": "createcog",
		"body": [
            "import traceback",
			"",
			"import discord",
			"from data.services.guild_service import guild_service",
			"from discord.commands import slash_command, Option",
			"from discord.ext import commands",
			"from utils.config import cfg",
			"from utils.context import BlooContext",
			"from utils.logger import logger",
			"from utils.permissions.checks import PermissionsFailure",
			"from utils.permissions.permissions import permissions",
            "",
            "from utils.context import BlooContext",
            "from utils.config import cfg",
            "",
            "class $1(commands.Cog):",
            "    def __init__(self, bot):",
            "        self.bot = bot",
            "",
            "    async def info_error(self, ctx: BlooContext, error):",
            "        if isinstance(error, discord.ApplicationCommandInvokeError):",
            "         error = error.original",
            "",
            "        if (isinstance(error, commands.MissingRequiredArgument)",
            "            or isinstance(error, PermissionsFailure)",
            "            or isinstance(error, commands.BadArgument)",
            "            or isinstance(error, commands.BadUnionArgument)",
            "            or isinstance(error, commands.MissingPermissions)",
            "            or isinstance(error, commands.BotMissingPermissions)",
            "            or isinstance(error, commands.MaxConcurrencyReached)",
            "                or isinstance(error, commands.NoPrivateMessage)):",
            "            await ctx.send_error(error)",
            "        else:",
            "            await ctx.send_error(\"A fatal error occured. Tell <@109705860275539968> about this.\")",
            "            logger.error(traceback.format_exc())",
            "",
            "",
            "def setup(bot):",
            "    bot.add_cog($1(bot))"
		]
	},
	"Create command": {
		"scope": "python",
		"prefix": "createcmd",
		"body": [
            "@slash_command(description=\"$1\")",
            "async def $2(self, ctx: BlooContext):",
            "    ",
		]
	}
}